{"ast":null,"code":"import _regeneratorRuntime from \"/Users/shishirsrivastava/Desktop/cp/projects/pdvedio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/shishirsrivastava/Desktop/cp/projects/pdvedio/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nvar _jsxFileName = \"/Users/shishirsrivastava/Desktop/cp/projects/pdvedio/src/components/App.js\";\nimport React, { Component } from 'react';\nimport DVideo from '../abis/DVideo.json';\nimport Navbar from './Navbar';\nimport Main from './Main';\nimport Web3 from 'web3';\nimport './App.css'; //Declare IPFS\n\nvar ipfsClient = require('ipfs-http-client');\n\nvar ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https'\n}); // leaving out the arguments will default to these values\n\nclass App extends Component {\n  componentWillMount() {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.loadWeb3();\n\n            case 2:\n              _context.next = 4;\n              return _this.loadBlockchainData();\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  }\n\n  loadWeb3() {\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!window.ethereum) {\n                _context2.next = 6;\n                break;\n              }\n\n              window.web3 = new Web3(window.ethereum);\n              _context2.next = 4;\n              return window.ethereum.enable();\n\n            case 4:\n              _context2.next = 7;\n              break;\n\n            case 6:\n              if (window.web3) {\n                window.web3 = new Web3(window.web3.currentProvider);\n              } else {\n                window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!');\n              }\n\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  }\n\n  loadBlockchainData() {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var web3, accounts, networkId, networkData, dvideo, videosCount, i, video, latest;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              web3 = window.web3; //Load accounts\n\n              _context3.next = 3;\n              return web3.eth.getAccounts();\n\n            case 3:\n              accounts = _context3.sent;\n              console.log(accounts); //Add first account the the state\n\n              _this2.setState({\n                account: accounts[0]\n              }); //Get network ID\n\n\n              _context3.next = 8;\n              return web3.eth.net.getId();\n\n            case 8:\n              networkId = _context3.sent;\n              networkData = DVideo.networks[networkId]; //Get network data\n              //Check if net data exists, then\n\n              if (!networkData) {\n                _context3.next = 33;\n                break;\n              }\n\n              dvideo = new web3.eth.Contract(DVideo.abi, networkData.address);\n\n              _this2.setState({\n                dvideo\n              });\n\n              _context3.next = 15;\n              return dvideo.methods.videoCount().call();\n\n            case 15:\n              videosCount = _context3.sent;\n\n              _this2.setState({\n                videosCount\n              }); //load video according to the newest\n              //this is hydrate c application with data \n              //sort by the newest\n              //this takes the video from the blockchAIN puts into the app close the video count src the video and putrs them into the blockchain\n\n\n              i = videosCount;\n\n            case 18:\n              if (!(i >= 1)) {\n                _context3.next = 26;\n                break;\n              }\n\n              _context3.next = 21;\n              return dvideo.methods.videos(i).call();\n\n            case 21:\n              video = _context3.sent;\n\n              _this2.setState({\n                video: [..._this2.state.videos, video]\n              });\n\n            case 23:\n              i--;\n              _context3.next = 18;\n              break;\n\n            case 26:\n              _context3.next = 28;\n              return dvideo.methods.videos(videosCount).call();\n\n            case 28:\n              latest = _context3.sent;\n\n              _this2.setState({\n                currentHash: latest.hash,\n                currentTitle: latest.title\n              });\n\n              _this2.setState({\n                loading: false\n              }); //the above code is required to fetch the data from the blockchain.\n\n\n              _context3.next = 34;\n              break;\n\n            case 33:\n              window.alert(\"DVideo contract has not been deployed to the detected network \"); //in the above line we created a copy of the smart contract but we want too change the adress to be dynamic as we connect throough different addresss using metamask\n              //Assign dvideo contract to a variable\n              //Add dvideo to the state\n              //Check videoAmounts\n              //Add videAmounts to the state\n              //Iterate throught videos and add them to the state (by newest)\n              //Set latest video and it's title to view as default \n              //Set loading state to false\n              //If network data doesn't exisits, log error\n\n            case 34:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  } //Get video\n  //this capture file is used to conb=vert the video to buffer\n  // and its getting ready to process and put it on IPFS\n  //prepare a file to upload on ipfs\n\n\n  constructor(props) {\n    super(props);\n\n    this.captureFile = event => {\n      event.preventDefault();\n      var file = event.target.files[0];\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = () => {\n        this.setState({\n          buffer: Buffer(reader.result)\n        });\n        console.log('buffer', this.state.buffer);\n      };\n    };\n\n    this.uploadVideo = title => {\n      console.log(\"Submitting file to IPFS...\"); //adding file to the IPFS\n\n      ipfs.add(this.state.buffer, (error, result) => {\n        //put on blockchain\n        console.log('IPFS result', result);\n\n        if (error) {\n          console.error(error);\n          return;\n        }\n\n        this.setState({\n          loading: true\n        });\n        this.state.dvideo.methods.uploadVideo(result[0].hash, title).send({\n          from: this.state.account\n        }).on('transactionHash', hash => {\n          this.setState({\n            loading: false\n          });\n        });\n      });\n    };\n\n    this.changeVideo = (hash, title) => {\n      this.setState({\n        'currentHash': hash\n      });\n      this.setState({\n        'currentTitle': title\n      });\n    };\n\n    this.state = {\n      buffer: null,\n      account: '',\n      dvideo: null,\n      videos: [],\n      loading: true,\n      currentHash: null,\n      currentTitle: null // loading: false,\n      // account: '',//we can set the default state by this to 0X0 but it will change to meta mask account as we set state account above line 37\n      //set states , to use the identicon 0X0 should be removed from the account from the above linee , account should be kept empty\n\n    }; //Bind functions\n\n    this.uploadVideo = this.uploadVideo.bind(this);\n    this.captureFile = this.captureFile.bind(this);\n    this.changeVideo = this.changeVideo.bind(this);\n  } //render function that lays out all the code on the page\n  // it got several main part such as Navbar where Navbar is a component in the components folder.\n\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(Navbar, {\n      account: this.state.account,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 9\n      }\n    }), this.state.loading ? /*#__PURE__*/React.createElement(\"div\", {\n      id: \"loader\",\n      className: \"text-center mt-5\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 59\n      }\n    }, \"Loading...\")) : /*#__PURE__*/React.createElement(Main, {\n      videos: this.state.videos,\n      uploadVideo: this.uploadVideo,\n      captureFile: this.captureFile,\n      changeVideo: this.changeVideo,\n      currentHash: this.state.currentHash,\n      currentTitle: this.state.currentTitle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/shishirsrivastava/Desktop/cp/projects/pdvedio/src/components/App.js"],"names":["React","Component","DVideo","Navbar","Main","Web3","ipfsClient","require","ipfs","host","port","protocol","App","componentWillMount","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","accounts","console","log","setState","account","net","getId","networkId","networkData","networks","dvideo","Contract","abi","address","methods","videoCount","call","videosCount","i","videos","video","state","latest","currentHash","hash","currentTitle","title","loading","constructor","props","captureFile","event","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","buffer","Buffer","result","uploadVideo","add","error","send","from","on","changeVideo","bind","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport DVideo from '../abis/DVideo.json'\nimport Navbar from './Navbar'\nimport Main from './Main'\nimport Web3 from 'web3';\nimport './App.css';\n\n//Declare IPFS\nconst ipfsClient = require('ipfs-http-client')\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' })  // leaving out the arguments will default to these values\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n        window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    //Load accounts\n    const accounts = await web3.eth.getAccounts()\n    console.log (accounts)\n    //Add first account the the state\n    this.setState({ account: accounts[0] })\n    //Get network ID\n        const networkId= await web3.eth.net.getId()\n        const networkData = DVideo.networks[networkId]\n\n\n\n    //Get network data\n    //Check if net data exists, then\n\n    if(networkData){\n    const dvideo = new web3.eth.Contract(DVideo.abi, networkData.address)\n    this.setState({dvideo})\n    const videosCount = await dvideo.methods.videoCount().call()\n    this.setState({videosCount})\n\n    //load video according to the newest\n    //this is hydrate c application with data \n    //sort by the newest\n    //this takes the video from the blockchAIN puts into the app close the video count src the video and putrs them into the blockchain\n    for(var i=videosCount;i>=1;i--)\n    {\n      const video= await dvideo.methods.videos(i).call();\n      this.setState({\n        video : [...this.state.videos,video]\n      })\n    }\n    //set the latest video along with the title to view as default\n    const latest= await dvideo.methods.videos(videosCount).call()\n    this.setState({\n      currentHash: latest.hash,\n      currentTitle: latest.title\n    })\n    this.setState({loading: false})\n\n//the above code is required to fetch the data from the blockchain.\n\n  }\n  else {\n    window.alert(`DVideo contract has not been deployed to the detected network `)\n    //in the above line we created a copy of the smart contract but we want too change the adress to be dynamic as we connect throough different addresss using metamask\n\n      //Assign dvideo contract to a variable\n      //Add dvideo to the state\n\n      //Check videoAmounts\n      //Add videAmounts to the state\n\n      //Iterate throught videos and add them to the state (by newest)\n\n\n      //Set latest video and it's title to view as default \n      //Set loading state to false\n\n      //If network data doesn't exisits, log error\n  }\n  }\n\n  //Get video\n  //this capture file is used to conb=vert the video to buffer\n  // and its getting ready to process and put it on IPFS\n  //prepare a file to upload on ipfs\n    captureFile = event => {\n    event.preventDefault()\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n\n    reader.onloadend = () => {\n      this.setState({ buffer: Buffer(reader.result) })\n      console.log('buffer', this.state.buffer)\n    }\n  }\n  //Upload video\n  uploadVideo = title => {\n     console.log(\"Submitting file to IPFS...\")\n\n    //adding file to the IPFS\n    ipfs.add(this.state.buffer, (error, result) => {\n      //put on blockchain\n      console.log('IPFS result', result)\n      if(error) {\n        console.error(error)\n        return\n  }\n\n       this.setState({ loading: true })\n      this.state.dvideo.methods.uploadVideo(result[0].hash, title).send({ from: this.state.account }).on('transactionHash', (hash) => {\n        this.setState({ loading: false })\n      })\n    })\n  }\n\n  //Change Video\n  changeVideo = (hash, title) => {\n   this.setState({'currentHash': hash});\n    this.setState({'currentTitle': title});\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n     buffer: null,\n     account:'',\n     dvideo: null,\n     videos:[],\n     loading: true,\n     currentHash: null,\n     currentTitle: null\n     // loading: false,\n     // account: '',//we can set the default state by this to 0X0 but it will change to meta mask account as we set state account above line 37\n      //set states , to use the identicon 0X0 should be removed from the account from the above linee , account should be kept empty\n    }\n\n    //Bind functions\n     this.uploadVideo = this.uploadVideo.bind(this)\n    this.captureFile = this.captureFile.bind(this)\n    this.changeVideo = this.changeVideo.bind(this)\n  }\n\n//render function that lays out all the code on the page\n// it got several main part such as Navbar where Navbar is a component in the components folder.\n  render() {\n    return (\n      <div>\n        <Navbar \n          account={this.state.account}\n        />\n        { this.state.loading\n          ? <div id=\"loader\" className=\"text-center mt-5\"><p>Loading...</p></div>\n          : <Main\n              videos={this.state.videos}\n              uploadVideo={this.uploadVideo}\n              captureFile={this.captureFile}\n              changeVideo={this.changeVideo}\n              currentHash={this.state.currentHash}\n              currentTitle={this.state.currentTitle}\n            />\n        }\n      </div>\n    );\n  }\n}\nexport default App;"]},"metadata":{},"sourceType":"module"}